# OOF version 2.0
FileVersion(number=1.0, format='ascii')
Microstructure.New(name='microstructure', size=Point(1,1), isize=iPoint(10,10))
Microstructure.Categories(microstructure='microstructure', categories=[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]])
Property.Mechanical.Elasticity.LargeStrain.Isotropic(name='', cijkl=IsotropicRank4TensorEnu(young=1.0,poisson=0.20000000000000001))
MaterialandType(name='material', properties=['Mechanical:Elasticity:LargeStrain:Isotropic'], materialtype='bulk')
Microstructure.DefineCategory.Material(microstructure='microstructure', category=0, material='material')
Microstructure.EndCategories(microstructure='microstructure')
Skeleton.NewPeriodic(name='skeleton', microstructure='microstructure', left_right_periodicity=False, top_bottom_periodicity=False)
Skeleton.Nodes(skeleton='microstructure:skeleton', points=[(0.0, 0.0), (1.0, 0.0), (0.0, 1.0), (1.0, 1.0)])
Skeleton.Elements(skeleton='microstructure:skeleton', nodes=[(0, 1, 3, 2)])
Skeleton.PinnedNodes(skeleton='microstructure:skeleton', nodes=[])
Skeleton.PointBoundary(skeleton='microstructure:skeleton', name='bottomleft', nodes=[0], exterior=1)
Skeleton.PointBoundary(skeleton='microstructure:skeleton', name='bottomright', nodes=[1], exterior=1)
Skeleton.PointBoundary(skeleton='microstructure:skeleton', name='topleft', nodes=[2], exterior=1)
Skeleton.PointBoundary(skeleton='microstructure:skeleton', name='topright', nodes=[3], exterior=1)
Skeleton.EdgeBoundary(skeleton='microstructure:skeleton', name='bottom', edges=[(0, 1)], exterior=1)
Skeleton.EdgeBoundary(skeleton='microstructure:skeleton', name='left', edges=[(2, 0)], exterior=1)
Skeleton.EdgeBoundary(skeleton='microstructure:skeleton', name='right', edges=[(1, 3)], exterior=1)
Skeleton.EdgeBoundary(skeleton='microstructure:skeleton', name='top', edges=[(3, 2)], exterior=1)
Mesh.New(name='mesh', masterelems=['D2_2', 'T3_3', 'Q4_4'], skeleton='microstructure:skeleton')
Subproblem.Fields(subproblem='microstructure:skeleton:mesh:default', defined=['Displacement'], active=['Displacement'], inplane=['Displacement'])
Subproblem.Equations(subproblem='microstructure:skeleton:mesh:default', equations=['Force_Balance'])
Subproblem.Solver(subproblem='microstructure:skeleton:mesh:default', solver_mode=AdvancedSolverMode(nonlinear_solver=Newton(relative_tolerance=1e-08,absolute_tolerance=1.0000000000000001e-15,maximum_iterations=200), time_stepper=StaticDriver(), asymmetric_solver=BiConjugateGradient(preconditioner=ILUPreconditioner(),tolerance=1e-13,max_iterations=1000), symmetric_solver=ConjugateGradient(preconditioner=ILUPreconditioner(),tolerance=1e-13,max_iterations=1000)))
Mesh.Initialize_Field(mesh='microstructure:skeleton:mesh', field=Displacement, initializer=ConstTwoVectorFieldInit(cx=0.0,cy=0.0))
Mesh.Boundary_Condition(mesh='microstructure:skeleton:mesh', bcname='bc', bc=DirichletBC(field=Displacement,field_component='x',equation=Force_Balance,eqn_component='x',profile=ContinuumProfileXTd(function='sqrt(2)*cos(omega*t+phi0) - sqrt(2)*cos(phi0)'),boundary='topright'))
Mesh.Boundary_Condition(mesh='microstructure:skeleton:mesh', bcname='bc<2>', bc=DirichletBC(field=Displacement,field_component='y',equation=Force_Balance,eqn_component='y',profile=ContinuumProfileXTd(function='sqrt(2)*sin(omega*t+phi0) - sqrt(2)*sin(phi0)'),boundary='topright'))
Mesh.Boundary_Condition(mesh='microstructure:skeleton:mesh', bcname='bc<3>', bc=DirichletBC(field=Displacement,field_component='y',equation=Force_Balance,eqn_component='y',profile=ConstantProfile(value=0.0),boundary='bottomleft'))
Mesh.Boundary_Condition(mesh='microstructure:skeleton:mesh', bcname='bc<4>', bc=DirichletBC(field=Displacement,field_component='x',equation=Force_Balance,eqn_component='x',profile=ConstantProfile(value=0.0),boundary='bottomleft'))
Mesh.Load_Field(mesh='microstructure:skeleton:mesh', fields=['Displacement', 'Displacement_z'], field_values=[(0, 0.0, 0.0, 0.0, 0.0, 0.0), (1, 0.0, 0.0, 0.0, 0.0, 0.0), (2, 0.0, 0.0, 0.0, 0.0, 0.0), (3, 0.0, 0.0, 0.0, 0.0, 0.0)])
Mesh.Time(mesh='microstructure:skeleton:mesh', time=0.0)
Mesh.Scheduled_Output.New(mesh='microstructure:skeleton:mesh', name=AutomaticName('GraphicsUpdate'), output=GraphicsUpdate())
Mesh.Scheduled_Output.Schedule(mesh='microstructure:skeleton:mesh', output=AutomaticName('GraphicsUpdate'), scheduletype=AbsoluteOutputSchedule(), schedule=Periodic(delay=0.0,interval=0.10000000000000001))
Mesh.Scheduled_Output.Destination(mesh='microstructure:skeleton:mesh', output=AutomaticName('GraphicsUpdate'), destination=GfxWindowDestination())
Mesh.Status(mesh='microstructure:skeleton:mesh', status=Unsolved(details='Newly loaded.'))
